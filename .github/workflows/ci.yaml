name: CI

on:
  push:
  pull_request:
  pull_request_target:
  workflow_dispatch:

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  build-info:
    runs-on: ubuntu-latest
    outputs:
      repo-owner: ${{ steps.repo-owner.outputs.result }}
      tags: ${{ steps.image-tags.outputs.image-tags }}
      build-config: ${{ steps.build-info.outputs.result }}
    steps:

      #github forces lower case for the image name
      - name: Get lowercase repo owner name
        uses: actions/github-script@v6
        id: repo-owner
        with:
          result-encoding: string
          script: |
            return context.repo.owner.toLowerCase()

      - uses: actions/checkout@v3

      - name: Set nightly tag if commit was on main
        id: add-nightly-tag
        if: startsWith(github.ref, 'refs/heads/main')
        run: |
          echo "nightly-tag=nightly" | tr -d "\n"  >> $GITHUB_OUTPUT

      - name: Set latest tag if its a tag
        id: add-latest-tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "latest-tag=latest" | tr -d "\n"  >> $GITHUB_OUTPUT

      - uses: actions/github-script@v6
        id: get-tag
        if: startsWith(github.ref, 'refs/tags/')
        with:
          result-encoding: string
          script: |
            return context.payload.ref.replace('refs/tags/', '')

      - name: concat tags to list
        id: image-tags
        run: |
          TAGS=$(cat <<-END
              [
              "${{ github.sha }}",
              "${{ steps.add-nightly-tag.outputs.nightly-tag }}",
              "${{ steps.add-latest-tag.outputs.latest-tag }}",
              "${{ steps.get-tag.outputs.result }}"
              ]
          END
          )
          TAGS=$(echo $TAGS | jq -c 'map(select(length > 0))')
          echo "image-tags=$TAGS" | tr -d "\n"  >> $GITHUB_OUTPUT

      - name: Get bulid info
        id: build-info
        run: |
          set -x
          sudo snap install yq
          docker compose --profile local-run config > /tmp/docker-compose.yml
          BUILD_INFO=$(cat /tmp/docker-compose.yml | yq '.services.[] | select(.build != null) | [.build * {"image": .image}]' -o=json)
          BUILD_INFO=$(echo $BUILD_INFO | jq -c -s add | sed "s|:local||g")
          echo "result=$BUILD_INFO" | tr -d "\n"  >> $GITHUB_OUTPUT
        env:
          REPO_OWNER: ${{ steps.repo-owner.outputs.result }}
          VERSION: local
          LATEX_DOCKERFILE_PATH: image/Dockerfile

  build-image:
    runs-on: ubuntu-latest
    needs:
      - build-info
    env:
      tags: ${{ needs.build-info.outputs.tags }}
      repo-owner: ${{ needs.build-info.outputs.repo-owner }}
      build-config: ${{ toJSON(fromJSON(needs.build-info.outputs.build-config)[0]) }}
    steps:
      - uses: actions/checkout@v3

      - run: |
          echo "build config:"
          cat <<-HEREDOC
          ${{ toJSON(env.build-config) }}
          HEREDOC
          
          echo "build tags:"
          cat <<-HEREDOC
          ${{ env.tags }}
          HEREDOC
          
          echo "build repo owner:"
          cat <<-HEREDOC
          ${{ env.repo-owner }}
          HEREDOC

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/github-script@v6
        id: expand-tags
        env:
          IMAGE: ${{ fromJSON(env.build-config).image }}
        with:
          script: |
            const { IMAGE } = process.env
            return JSON.parse('${{ env.tags }}').map(tag => `${IMAGE}:${tag}`)

      - name: Build and push image
        uses: docker/build-push-action@v4
        with:
          push: true
          file: ${{ fromJSON(env.build-config).dockerfile }}
          tags: ${{ join(fromJSON(steps.expand-tags.outputs.result)) }}
          context: ${{ fromJSON(env.build-config).context }}
          cache-from: type=gha,scope=${{ fromJSON(env.build-config).image }}
          cache-to: type=gha,scope=${{ fromJSON(env.build-config).image }},mode=max
        

  check-format:
    runs-on: ubuntu-latest
    needs:
      - build-info
      - build-image
    env:
      build-config: ${{ toJSON(fromJSON(needs.build-info.outputs.build-config)[0]) }}
      VERSION: ${{ github.sha }}
      REPO_OWNER: ${{ needs.build-info.outputs.repo-owner }}
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and load image
        uses: docker/build-push-action@v4
        with:
          load: true
          file: ${{ fromJSON(env.build-config).dockerfile }}
          tags: ${{ fromJSON(env.build-config).image }}:${{ env.VERSION }}
          context: ${{ fromJSON(env.build-config).context }}
          cache-from: type=gha,scope=${{ fromJSON(env.build-config).image }}
          cache-to: type=gha,scope=${{ fromJSON(env.build-config).image }},mode=max

      - name: allow 1000 to write files
        run: chmod -R +w .

      - name: check-format
        run: docker compose run --rm latex check-format

  build-pdf:
    runs-on: ubuntu-latest
    needs:
      - build-info
      - build-image
    env:
      build-config: ${{ toJSON(fromJSON(needs.build-info.outputs.build-config)[0]) }}
      VERSION: ${{ github.sha }}
      REPO_OWNER: ${{ needs.build-info.outputs.repo-owner }}
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and load image
        uses: docker/build-push-action@v4
        with:
          load: true
          file: ${{ fromJSON(env.build-config).dockerfile }}
          tags: ${{ fromJSON(env.build-config).image }}:${{ env.VERSION }}
          context: ${{ fromJSON(env.build-config).context }}
          cache-from: type=gha,scope=${{ fromJSON(env.build-config).image }}
          cache-to: type=gha,scope=${{ fromJSON(env.build-config).image }},mode=max

      - name: allow 1000 to write files
        run: chmod -R +w .

      - name: generate pdf
        run: docker compose run -u 1001 --rm latex

      - name: add archive to build output
        uses: actions/upload-artifact@v2
        with:
          path: out/*.pdf

      - name: Comment artifact url on PR
        uses: thollander/actions-comment-pull-request@v2
        if: ${{ github.event_name == 'pull_request_target' }}
        with:
          pr_number: ${{ github.event.issue.number }}
          message: |
            ### Generated PDF for pull request
            
            You can view it with this [Link](https://github.com/${{ github.repository_owner }}/fund-data-science-cheat-sheet/actions/runs/${{ github.run_id }})

      - name: create nightly release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/heads/main')
        with:
          files: |
            out/*.pdf
          tag_name: nightly

      - name: create release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            out/*.pdf
